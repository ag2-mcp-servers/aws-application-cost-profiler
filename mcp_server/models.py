# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:40:16+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class DeleteReportDefinitionRequest(BaseModel):
    pass


class Format(Enum):
    CSV = 'CSV'
    PARQUET = 'PARQUET'


class GetReportDefinitionRequest(BaseModel):
    pass


class ImportId(
    RootModel[constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=1, max_length=255)


class Integer(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class InternalServerException(RootModel[Any]):
    root: Any


class ListReportDefinitionsRequest(BaseModel):
    pass


class ReportDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1024)


class ReportFrequency(Enum):
    MONTHLY = 'MONTHLY'
    DAILY = 'DAILY'
    ALL = 'ALL'


class ReportId(
    RootModel[constr(pattern=r'^[0-9A-Za-z\.\-_]+$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^[0-9A-Za-z\.\-_]+$', min_length=1, max_length=255)


class S3Bucket(
    RootModel[
        constr(
            pattern=r'(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)',
            min_length=3,
            max_length=63,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)',
        min_length=3,
        max_length=63,
    )


class S3BucketRegion(Enum):
    ap_east_1 = 'ap-east-1'
    me_south_1 = 'me-south-1'
    eu_south_1 = 'eu-south-1'
    af_south_1 = 'af-south-1'


class S3Key(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=512)


class S3Prefix(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=512)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=512)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SourceS3Location(BaseModel):
    bucket: S3Bucket
    key: S3Key
    region: Optional[S3BucketRegion] = None


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class Token(
    RootModel[
        constr(
            pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
            min_length=1,
            max_length=102400,
        )
    ]
):
    root: constr(
        pattern=r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',
        min_length=1,
        max_length=102400,
    )


class UpdateReportDefinitionResult(BaseModel):
    reportId: Optional[ReportId] = None


class ValidationException(RootModel[Any]):
    root: Any


class SourceS3Location1(BaseModel):
    bucket: Optional[S3Bucket] = None
    key: Optional[S3Key] = None
    region: Optional[S3BucketRegion] = None


class ImportApplicationUsagePostRequest(BaseModel):
    sourceS3Location: SourceS3Location1 = Field(
        ...,
        description='Represents the Amazon Simple Storage Service (Amazon S3) location where usage data is read from.',
    )


class DestinationS3Location(BaseModel):
    bucket: Optional[S3Bucket] = None
    prefix: Optional[S3Prefix] = None


class ReportDefinitionPostRequest(BaseModel):
    destinationS3Location: DestinationS3Location = Field(
        ...,
        description='Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to.',
    )
    format: Format = Field(
        ..., description='Required. The format to use for the generated report.'
    )
    reportDescription: constr(pattern=r'.*\S.*', min_length=1, max_length=1024) = Field(
        ..., description='Required. Description of the report.'
    )
    reportFrequency: ReportFrequency = Field(
        ..., description='Required. The cadence to generate the report.'
    )
    reportId: constr(pattern=r'^[0-9A-Za-z\.\-_]+$', min_length=1, max_length=255) = (
        Field(
            ...,
            description='Required. ID of the report. You can choose any valid string matching the pattern for the ID.',
        )
    )


class ReportDefinitionReportIdPutRequest(BaseModel):
    destinationS3Location: DestinationS3Location = Field(
        ...,
        description='Represents the Amazon Simple Storage Service (Amazon S3) location where AWS Application Cost Profiler reports are generated and then written to.',
    )
    format: Format = Field(
        ..., description='Required. The format to use for the generated report.'
    )
    reportDescription: constr(pattern=r'.*\S.*', min_length=1, max_length=1024) = Field(
        ..., description='Required. Description of the report.'
    )
    reportFrequency: ReportFrequency = Field(
        ..., description='Required. The cadence to generate the report.'
    )


class DeleteReportDefinitionResult(BaseModel):
    reportId: Optional[ReportId] = None


class ImportApplicationUsageRequest(BaseModel):
    sourceS3Location: SourceS3Location


class ImportApplicationUsageResult(BaseModel):
    importId: ImportId


class PutReportDefinitionResult(BaseModel):
    reportId: Optional[ReportId] = None


class S3Location(BaseModel):
    bucket: S3Bucket
    prefix: S3Prefix


class UpdateReportDefinitionRequest(BaseModel):
    destinationS3Location: S3Location
    format: Format
    reportDescription: ReportDescription
    reportFrequency: ReportFrequency


class GetReportDefinitionResult(BaseModel):
    createdAt: Timestamp
    destinationS3Location: S3Location
    format: Format
    lastUpdated: Timestamp
    reportDescription: ReportDescription
    reportFrequency: ReportFrequency
    reportId: ReportId


class PutReportDefinitionRequest(BaseModel):
    destinationS3Location: S3Location
    format: Format
    reportDescription: ReportDescription
    reportFrequency: ReportFrequency
    reportId: ReportId


class ReportDefinition(BaseModel):
    createdAt: Optional[Timestamp] = None
    destinationS3Location: Optional[S3Location] = None
    format: Optional[Format] = None
    lastUpdatedAt: Optional[Timestamp] = None
    reportDescription: Optional[ReportDescription] = None
    reportFrequency: Optional[ReportFrequency] = None
    reportId: Optional[ReportId] = None


class ReportDefinitionList(RootModel[List[ReportDefinition]]):
    root: List[ReportDefinition]


class ListReportDefinitionsResult(BaseModel):
    nextToken: Optional[Token] = None
    reportDefinitions: Optional[ReportDefinitionList] = None
